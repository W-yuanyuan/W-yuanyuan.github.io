<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cpp语法-面向对象部分</title>
    <link href="/2025/03/07/cpp_base/"/>
    <url>/2025/03/07/cpp_base/</url>
    
    <content type="html"><![CDATA[<p>[toc]</p><h2 id="C-核心"><a href="#C-核心" class="headerlink" title="C++核心"></a>C++核心</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><ol><li>类和对象</li></ol><p>类和对象是C++面向对象的基础，在C++中万事万物都是对象，C++利用类来实例化对象，下面是创建一个Circle类并实例化的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_r;<br>    <br>    <span class="hljs-type">void</span> getM_r &#123;<br>        cout &lt;&lt; m_r;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 实例化</span><br>Circle a;   <br></code></pre></td></tr></table></figure><p>类中的变量称为属性(成员属性)，类中的函数称为行为（成员函数、成员方法）。</p><ol start="2"><li>访问权限</li></ol><p>public: 类内可以访问，类外可以访问</p><p>protected: 类内可以访问，类外不可以访问</p><p>private: 类内可以访问，类外不可以访问</p><p><strong>protected 和 private</strong>在继承部分会有不同。</p><ol start="3"><li>struct和class的区别</li></ol><p>默认访问权限不同，struct默认访问权限是public，class默认权限是private</p><ol start="4"><li>在C++中一般把成员属性设置为私有，把成员方法设置公共。下面是一个标准的C++类。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>string name;<br>    <span class="hljs-type">int</span> val;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        name = s;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getVal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setVal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        val = x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 实例化</span><br>Person a;<br>a.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>a.<span class="hljs-built_in">setVal</span>(<span class="hljs-number">100</span>);<br><br>cout &lt;&lt; a.<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br>cout &lt;&lt; a.<span class="hljs-built_in">getVal</span>();<br></code></pre></td></tr></table></figure><p>通过成员函数来访问和设置成员属性，可以防止误操作。</p><ol start="5"><li>对象的初始化和清理</li></ol><p>C++通过<strong>构造函数</strong>和<strong>析构函数</strong>来进行初始化和清理，这两个函数由编译器自动调用，同时存在默认实现。</p><p><strong>构造函数</strong>：创建对象时给对象赋值</p><p><strong>析构函数</strong>：对象销毁前，系统自动调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造函数</span><br>类名()&#123;&#125;<br><span class="hljs-comment">// 析构函数</span><br>~类名()&#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> val;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123;<br>     <span class="hljs-comment">// 无参构造   </span><br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> x) &#123;<br>        <span class="hljs-comment">// 含参构造</span><br>        val = x;<br>    &#125;<br>    <br>    ~<span class="hljs-built_in">Person</span>() &#123;<br>        <span class="hljs-comment">// 不允许有参数，也不允许发生重载</span><br>        <span class="hljs-comment">// 对象销毁前自动调用</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="6"><li>构造函数的分类及调用</li></ol><p>分类：无参构造（默认构造），有参构造、拷贝构造</p><p><strong>拷贝构造</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123; <span class="hljs-comment">// 无参构造</span><br>        <br>    &#125;<br>    <br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123; <span class="hljs-comment">// 有参构造</span><br>        <br>    &#125;<br>    <br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123; <span class="hljs-comment">// 拷贝构造</span><br>        age = p.age;<br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>调用方式</strong>：</p><p>括号法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造调用</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">// 有参构造</span><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">// 拷贝构造</span><br></code></pre></td></tr></table></figure><p>Person p();  不允许这样调用无参构造，尽管编译不报错，但在运行时，会将这一句误解为<strong>函数声明</strong></p><p>显示法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造</span><br>Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 有参构造</span><br>Person p3 = <span class="hljs-built_in">Person</span>(p2); <span class="hljs-comment">// 拷贝构造</span><br><br><span class="hljs-comment">// Person(10) 会被认为是一个匿名对象，执行结束后，系统会立即回收匿名对象。</span><br><br><span class="hljs-comment">// Person(p3); 这样是错误的。不要利用拷贝构造，创建匿名对象，会被认为是一个对象的声明</span><br></code></pre></td></tr></table></figure><p>隐式转换法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造</span><br>Person p2 = <span class="hljs-number">10</span>; <span class="hljs-comment">// 有参构造</span><br>Person p3 = p2; <span class="hljs-comment">// 拷贝构造</span><br></code></pre></td></tr></table></figure><p>new开辟的数据在堆区</p><ol start="7"><li>浅拷贝与深拷贝</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  string name;<br>    <span class="hljs-type">int</span>* t;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123;&#125;<br>    <span class="hljs-built_in">Person</span>(string _name, <span class="hljs-type">int</span> <span class="hljs-type">_t</span>) &#123;<br>        name = _name;<br>        t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-type">_t</span>); <span class="hljs-comment">// 开辟在堆区</span><br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>        name = p.name;<br>        t = p.t;  <span class="hljs-comment">// 编译器提供的默认拷贝形式（浅拷贝）</span><br>        t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.<span class="hljs-type">int</span>); <span class="hljs-comment">// 深拷贝</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>浅拷贝会造成堆区内存重复释放。</p><ol start="8"><li>初始化列表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    string name;<br>    Person* next;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(string _name, Person* _next) : <span class="hljs-built_in">name</span>(_name), <span class="hljs-built_in">next</span>(_next) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>9、静态成员</p><p>静态成员变量：</p><ul><li>所有对象共享同一份数据</li><li>编译阶段分配内存（全局区）</li><li>类内声明，类外初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> &#123; <span class="hljs-comment">// 类内声明</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a;<br>&#125;;<br><br><span class="hljs-type">int</span> person::a = <span class="hljs-number">100</span>; <span class="hljs-comment">// 类外初始化</span><br><span class="hljs-comment">// 静态成员变量也有访问权限</span><br></code></pre></td></tr></table></figure><p>静态成员函数：</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><h3 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h3><ol><li>C++对象模型和this指针</li></ol><ul><li>在C++中，类内的成员变量和成员函数分开存储</li><li>只有非静态成员变量才属于类的对象上</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 一个对象占多少内存，取决于它的成员变量</span><br><span class="hljs-comment">// 空对象占一个字节</span><br></code></pre></td></tr></table></figure><ol start="2"><li>this指针</li></ol><ul><li>this指针指向被调用的成员函数所属的对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string name;<br>    <br>    <span class="hljs-built_in">person</span>(string name) &#123;<br>        <span class="hljs-comment">// 解决名称冲突问题</span><br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>空指针访问成员函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 空指针可以访问函数</span><br><span class="hljs-comment">// 但是不能访问其中的属性</span><br></code></pre></td></tr></table></figure><ol start="4"><li>const修饰成员函数</li></ol><ul><li>常函数内不能修改成员属性</li><li>常对象只能调用常函数</li><li>this的本质是指针常量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 非法</span><br>        m_B = <span class="hljs-number">200</span>; <span class="hljs-comment">// 合法</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> Person p;<br>    p.m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 非法</span><br>    p.m_B = <span class="hljs-number">200</span>; <span class="hljs-comment">// 合法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>在程序中，有些私有属性，也想让类外的特殊函数访问</p><ol><li>全局函数做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Building build)</span></span>; <span class="hljs-comment">// 声明友元全局函数</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Building</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    string sittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string room;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Building Build)</span> </span>&#123;<br>    cout &lt;&lt; build.sittingRoom; <span class="hljs-comment">// 合法</span><br>cout &lt;&lt; build.room; <span class="hljs-comment">// 非法</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>类做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goodgay</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    Building* build = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Building</span>();<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; build-&gt;room;  <span class="hljs-comment">// 非法</span><br>        cout &lt;&lt; build-&gt;sittingRoom; <span class="hljs-comment">// 合法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> &#123;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goodgay</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Building</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    string sittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string room;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>成员函数做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">Goodgay::visit</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>对已有的运算符重新进行定义，赋予其另一种功能</p><ol><li>加号重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br>&#125;<br>Person <span class="hljs-keyword">operator</span>+ (Person&amp; p1, Person&amp; p2) &#123;<br>    <span class="hljs-comment">// 重载+号</span><br>    Person temp;<br>    temp.m_a = p<span class="hljs-number">1.</span>m_a + p<span class="hljs-number">2.</span>m_a;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;;<br>Person s1;<br>s<span class="hljs-number">1.</span>m_a = <span class="hljs-number">10</span>;<br>Person s2;<br>s<span class="hljs-number">2.</span>m_a = <span class="hljs-number">20</span>;<br>Person p3 = p1 + p2; <span class="hljs-comment">// 非法操作，编译器无法理解P1 + p2</span><br></code></pre></td></tr></table></figure><ol start="2"><li>左移运算符</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 重载 &lt;&lt; 可以输出类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>&lt;&lt; (ostream cout, Person&amp; p) &#123;<br>    <span class="hljs-comment">// 重载&lt;&lt;号</span><br>cout &lt;&lt; p.m_a;<br>&#125;<br>Person s1;<br>cout &lt;&lt; s1; <span class="hljs-comment">// 非法</span><br></code></pre></td></tr></table></figure><ol start="3"><li>递增运算符重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-built_in">MyInteger</span>() &#123;number = <span class="hljs-number">0</span>;&#125;<br>&#125;;<br><span class="hljs-comment">// 重载前置++</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++ (MyInteger&amp; p) &#123;<br>    p.number++;<br>&#125;<br><span class="hljs-comment">// 后置++</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++ (<span class="hljs-type">int</span>) &#123;<br>    <br>&#125;<br>MyInteger p;<br>p ++;<br></code></pre></td></tr></table></figure><ol start="4"><li>赋值运算符重载</li></ol><p>编译器会对’&#x3D;’进行默认重载，对属性进行值拷贝，可能会带来浅拷贝的问题</p><ol start="5"><li>关系运算符重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> age;<br>    string name;<br>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>== (Person&amp; p1, Person&amp; p2) &#123;<br>    <span class="hljs-keyword">if</span> (p<span class="hljs-number">1.</span>age == p<span class="hljs-number">2.</span>age &amp;&amp; p<span class="hljs-number">1.</span>name == p<span class="hljs-number">2.</span>name) &#123;<br>        <span class="hljs-keyword">return</span> ture;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;tom&quot;</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;tom&quot;</span>)</span></span>;<br><br><span class="hljs-keyword">if</span> (p1 == p2) <span class="hljs-comment">// 非法，需要重载==号</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>函数调用重载</strong></li></ol><p>在STL中常用函数调用重载，也叫<strong>仿函数</strong></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>语法</li></ol><p>class 子类 : 继承方式 父类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> father &#123;<br><span class="hljs-keyword">public</span>:<br>    cout &lt;&lt; <span class="hljs-string">&quot;这是一个子类&quot;</span> &lt;&lt; endl;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>继承方式</li></ol><p>父类中私有的内容，子类无法访问</p><ul><li>公共继承</li></ul><p>父类中public变为public，protected变为protected</p><ul><li>保护继承</li></ul><p>父类中public变为protected，protected变为protected</p><p>保护权限，类外不可以访问</p><ul><li>私有继承</li></ul><p>父类中public变为private，protected变为private</p><ol start="3"><li>继承中的对象模型</li></ol><p>父类中所有非静态成员属性都会被子类继承下去</p><p>父类中私有成员属性，是被编译器隐藏了</p><ol start="4"><li>构造和析构顺序</li></ol><p>子类继承父类后，当创建子类对象时，也会调用父类的构造</p><p>先构造父类，再构造子类，先析构子类，再析构父类</p><ol start="5"><li>继承中同名的处理方式</li></ol><ul><li>访问子类 直接访问</li><li>访问父类 +作用域</li></ul><ol start="6"><li>同名静态成员处理</li></ol><p>跟5一样，子类直接访问，父类+作用域</p><p>子类中出现和父类同名静态成员函数，会隐藏掉父类的所有静态成员函数</p><p>son.father::fun()</p><ol start="7"><li>多继承语法</li></ol><p>语法：class 子类 : 继承方式 父类1，继承方式 父类2</p><ol start="8"><li>虚继承</li></ol><p>class sheep : virtual public animal {</p><p>};</p><p>菱形继承导致了子类继承同样的数据，造成内存浪费</p><p>virtual可以解决菱形继承的问题</p><p>vbptr 虚基类指针 指向 vbtable 虚基类表</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>静态多态：函数重载 运算符重载 复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><p>静态多态的函数地址早绑定，编译阶段确定函数的地址</p><p>动态多态的函数地址晚绑定，运行阶段确定函数的地址</p><p>父类的指针，可以直接指向子类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span><br>    &#125;  <br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;猫在说话&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSpeak</span><span class="hljs-params">(animal&amp; a)</span> </span>&#123;<br>    a.<span class="hljs-built_in">speak</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cat a;<br>    <span class="hljs-built_in">doSpeak</span>(a);<br>&#125;<br><span class="hljs-comment">// 输出-&gt;动物在说话</span><br>将父类中的函数换位 <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">// 输出-&gt;猫在说话</span></span><br></code></pre></td></tr></table></figure><p>动态多态的两个条件</p><ul><li>存在继承关系</li><li>子类重写父类的虚函数</li><li>父类的指针或引用指向子类对象</li></ul><p>底层原理</p><p>virtual函数中存在一个vfptr-虚函数表指针</p><p>指向vftable</p><p><strong>纯虚函数</strong> </p><p>当类中有了纯虚函数，这个类就是抽象类</p><p>抽象类不可以实例化</p><p>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">// 纯虚函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>虚析构和纯虚析构</strong></p><p>把父类中的析构函数改为虚析构</p><p>利用虚析构可以解决父类指针释放子类对象，释放不干净的问题</p><p><strong>纯虚析构</strong></p><p>virtual ~animal() &#x3D; 0;</p><p>需要在类外，重写析构函数</p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><blockquote><p> <fstream>文件流管理</p></blockquote><p>1、文本文件</p><p>文件以文本的ASCII码形式存储在计算机中</p><p>2、二进制文件</p><p>文本以二进制形式存储在计算机中，用户一般不能直接读懂</p><ul><li>ofstream 写操作</li><li>ifstream 读操作</li><li>fstream 读写操作</li></ul><p>写文件步骤：</p><ol><li>包含头文件</li><li>创建流对象</li><li>打开文件</li></ol><p>ios::in 读文件的方式</p><p>ios::out 写文件的方式</p><p>ios::trunc 如果文件存在先删除，再创建</p><ol start="4"><li><p>写数据</p></li><li><p>关闭文件</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 写文件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    ofstream ofs;<br>    <br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;文件路径&quot;</span>, ios::out);<br>    <br>    ofs &lt;&lt; <span class="hljs-string">&quot;你好，文本&quot;</span> &lt;&lt; endl;<br>    <br>    ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 读文件</span><br>    ifstream ifs;<br>    <br>    ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>, ios::in);<br>    <br>    <span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;打开失败&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (ifs &gt;&gt; buf) &#123;<br>        cout &lt;&lt; buf &lt;&lt; endl;<br>    &#125;<br>    <br>    string buf;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ifs, buf)) &#123;<br>        cout &lt;&lt; buf &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">while</span> ((c = ifs.<span class="hljs-built_in">get</span>() != EOF)) &#123;<br>        cout &lt;&lt; c;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 二进制方式读写</p><p>二进制写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>   ofstream ofs;<br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wang.txt&quot;</span>, ios::out | ios::binary);<br>    Person p;<br>    p.m_Name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    p.m_Age = <span class="hljs-number">18</span>;<br>    <br>    ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;p, <span class="hljs-built_in">sizeof</span>(Person));<br>    <br>    ofs.<span class="hljs-built_in">open</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>二进制读</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>] = <span class="hljs-string">&quot;zhaolei&quot;</span>;<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>   ofstream ofs;<br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wang.txt&quot;</span>, ios::out | ios::binary);<br>    Person p;<br>    p.m_Name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    p.m_Age = <span class="hljs-number">18</span>;<br>    <br>    ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;p, <span class="hljs-built_in">sizeof</span>(Person));<br>    <br>    ofs.<span class="hljs-built_in">open</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cpp语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp语法</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/19/hello-world/"/>
    <url>/2025/02/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
