<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Cpp泛型编程</title>
    <link href="/2025/03/09/cpp_improve/"/>
    <url>/2025/03/09/cpp_improve/</url>
    
    <content type="html"><![CDATA[<h2 id="C-提高编程"><a href="#C-提高编程" class="headerlink" title="C++提高编程"></a>C++提高编程</h2><ul><li>本阶段主要针对C++<strong>泛型编程</strong>和<strong>STL</strong>技术做详细讲解</li></ul><h3 id="模版"><a href="#模版" class="headerlink" title="模版"></a>模版</h3><ul><li>C++另一种编程思想称为泛型编程，主要利用的技术就是模版</li><li>C++提供两种模版机制：<strong>函数模版</strong>和<strong>类模版</strong></li></ul><ol><li>函数模板</li></ol><p>建立一个通用函数，可以不指定函数返回值类型和参数类型</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 利用myswap模板函数，进行交换</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">typename</span> T&gt;  <span class="hljs-comment">// typename可以替换为class</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">myswap</span><span class="hljs-params">(T&amp; a, T&amp;b)</span> </span>&#123;<br>    T temp;<br>    temp = a;<br>    a = b;<br>    b = temp;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">int</span> a = <span class="hljs-number">1</span>, b = <span class="hljs-number">2</span>;<br>    <span class="hljs-type">char</span> c = <span class="hljs-string">&#x27;c&#x27;</span>, d = <span class="hljs-string">&#x27;d&#x27;</span>;<br>    <span class="hljs-built_in">myswap</span>(a, b);<br>    <span class="hljs-built_in">myswap</span>(c, d);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>模板函数的调用有两种方式：自动类型推导、显示指定类型</p><ul><li>自动类型推导</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">myswap</span>(a, b); <span class="hljs-comment">// 直接传入变量，编译器会推导出类型</span><br></code></pre></td></tr></table></figure><ul><li>显示指定类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-built_in">myswap</span>&lt;<span class="hljs-type">int</span>&gt;(a, b); <span class="hljs-comment">// 告诉编译器，模板类型是int</span><br></code></pre></td></tr></table></figure><p>注意事项：</p><ul><li>自动类型推导，必须推导出一致的数据类型才可以使用</li><li>模板必须要确定出T的数据类型才可以使用</li></ul><ol start="2"><li>函数模板案例</li></ol><ul><li>利用函数模板封装一个排序的函数，可以对不同的数据类型进行排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">my_Sort</span><span class="hljs-params">(T array[], <span class="hljs-type">int</span> len)</span> </span>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i ++ ) &#123;<br>        <span class="hljs-type">int</span> max = i;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j ++ ) &#123;<br>            <span class="hljs-keyword">if</span> (array[i] &lt; array[j]) &#123;<br>                max = j;<br>            &#125;<br>        &#125;<br>        <span class="hljs-built_in">swap</span>(array[i], array[max]);<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">char</span> array[] = <span class="hljs-string">&quot;abcdef&quot;</span>;<br>    <span class="hljs-built_in">my_Sort</span>(array, <span class="hljs-number">6</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; i ++ ) cout &lt;&lt; array[i]; <span class="hljs-comment">// 输出结果为 fedcba</span><br>    <br>    <span class="hljs-type">int</span> newarray[] = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    <span class="hljs-built_in">my_Sort</span>(newarray, <span class="hljs-number">3</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i ++ ) cout &lt;&lt; newarray[i]; <span class="hljs-comment">// 输出结果为 321</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>普通函数与函数模板区别</li></ol><ul><li>普通函数调用时可以发生隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">myAdd</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> b = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">myAdd</span>(a, b);   <span class="hljs-comment">// 可以正常执行，字符c会被转为整形，然后进行相加</span><br></code></pre></td></tr></table></figure><ul><li>函数模板 用自动类型推导 不可以发生隐式类型转换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function">T <span class="hljs-title">myAdd</span><span class="hljs-params">(T a, T b)</span> </span>&#123;<br>    <span class="hljs-keyword">return</span> a + b;<br>&#125;<br><span class="hljs-type">int</span> a = <span class="hljs-number">10</span>;<br><span class="hljs-type">char</span> b = <span class="hljs-string">&#x27;c&#x27;</span>;<br><span class="hljs-built_in">myAdd</span>(a, b);   <span class="hljs-comment">// 不可以正常执行，编译器无法确定T的类型</span><br></code></pre></td></tr></table></figure><ul><li>函数模板 用显示指定类型 可以发生隐式类型转换</li></ul><p>和普通函数调用类似</p><ol start="4"><li>普通函数和函数模板的调用规则</li></ol><ul><li>如果函数模板和普通函数都可以实现，优先调用普通函数</li><li>可以通过空模板参数列表来强制调用函数模板</li><li>函数模板也可以发生重载</li><li>如果函数模板可以产生更好的匹配优先调用函数模板</li></ul><ol start="5"><li>模板的局限性</li></ol><p>略</p><p><strong>学习模板并不是为了写模板，而时在STL中使用系统提供的模板</strong></p><ol start="6"><li>类模板</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">NameType</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">AgeType</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br>NameType a;<br>    AgeType b;<br>    <span class="hljs-built_in">Person</span> (NameType name, AgeType age) &#123;<br>        a = name;<br>        b = age;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;libai&quot;</span>, <span class="hljs-number">10</span>)</span></span>;<br></code></pre></td></tr></table></figure><ol start="7"><li>类模板与函数模板区别</li></ol><ul><li>类模板没有自动类型推导的使用方式</li><li>类模板在模板参数列表中可以有默认参数</li></ul><ol start="8"><li>类模板中成员函数创建时机</li></ol><ul><li>只有在调用时才会创建</li></ul><ol start="9"><li>类模板对象做函数参数</li></ol><ul><li>指定传入的类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T1 name;<br>    T2 age;<br>    <span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;age;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(Person&lt;string, <span class="hljs-type">int</span>&gt;&amp; p)</span> </span>&#123;<br>p.<span class="hljs-built_in">showInfo</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;libai&quot;</span>, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-built_in">printPerson</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>参数模板化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T1 name;<br>    T2 age;<br>    <span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;age;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T1, <span class="hljs-keyword">class</span> T2&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(Person&lt;T1, T2&gt;&amp; p)</span> </span>&#123;<br>p.<span class="hljs-built_in">showInfo</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;wukong&quot;</span>, <span class="hljs-number">2</span>)</span></span>;<br>    <span class="hljs-built_in">printPerson</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><ul><li>整个类模板化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    T1 name;<br>    T2 age;<br>    <span class="hljs-built_in">Person</span>(T1 name, T2 age) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showInfo</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-keyword">this</span>-&gt;name &lt;&lt; <span class="hljs-string">&quot; &quot;</span> &lt;&lt; <span class="hljs-keyword">this</span>-&gt;age;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> T&gt;</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">printPerson</span><span class="hljs-params">(T&amp; p)</span> </span>&#123;<br>p.<span class="hljs-built_in">showInfo</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>   <span class="hljs-function">Person&lt;string, <span class="hljs-type">int</span>&gt; <span class="hljs-title">p</span><span class="hljs-params">(<span class="hljs-string">&quot;xixi&quot;</span>, <span class="hljs-number">3</span>)</span></span>;<br>    <span class="hljs-built_in">printPerson</span>(p);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="10"><li>类模板与继承</li></ol><ul><li>当子类继承的父类是一个类模板时，子类在声明时，要指定类型</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    T m;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> Base&lt;<span class="hljs-type">int</span>&gt; &#123; <span class="hljs-comment">// T为int</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><ul><li>如果想灵活指定父类中的类型，字类也要是类模板</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span> &#123;<br>    T m;<br>&#125;<br><br><span class="hljs-keyword">template</span>&lt;<span class="hljs-keyword">class</span> <span class="hljs-title class_">T1</span>, <span class="hljs-keyword">class</span> <span class="hljs-title class_">T2</span>&gt;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> Base&lt;T2&gt; &#123; <span class="hljs-comment">// T为int</span><br>    T1 obj;<br>&#125;<br><br>son&lt;<span class="hljs-type">int</span>, <span class="hljs-type">char</span>&gt; s; <span class="hljs-comment">// 声明了一个son对象，指定了T1为int T2为char，同时T2也是父类中的T</span><br></code></pre></td></tr></table></figure><ol start="11"><li>类模版的分文件编写</li></ol><ul><li>类模版中的成员函数只有在调用时才会创建</li><li>分文件编写会导致函数内容链接不到</li></ul><p>解决方法：</p><ul><li>直接包含.cpp文件</li><li>将.h和.cpp中的内容写到一起，将后缀名改为.hpp文件</li></ul><ol start="12"><li>类模版与友元</li></ol><p>类外函数访问不到私有变量</p><h3 id="STL初识"><a href="#STL初识" class="headerlink" title="STL初识"></a>STL初识</h3><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><ul><li><p>string是C++风格的字符串 而string本质是一个类</p></li><li><p>find函数，字符串匹配</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string str = <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-type">int</span> pos = str.<span class="hljs-built_in">find</span>(<span class="hljs-string">&quot;hello&quot;</span>);  <span class="hljs-comment">// 结果为0</span><br></code></pre></td></tr></table></figure><ul><li>string的比较 按照ASCII码进行比较</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s1 = <span class="hljs-string">&quot;hello&quot;</span>;<br>string s2 = <span class="hljs-string">&quot;hello&quot;</span>;<br>str<span class="hljs-number">1.</span><span class="hljs-built_in">compare</span>(s2);  返回<span class="hljs-number">0</span><br></code></pre></td></tr></table></figure><ul><li><p>字符串的存取  利用[]或at</p></li><li><p>string的插入</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">string s = <span class="hljs-string">&quot;hello&quot;</span>;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>, <span class="hljs-string">&quot;111&quot;</span>);  <span class="hljs-comment">// 在第1个位置前，插入&quot;111&quot;</span><br>s.<span class="hljs-built_in">erase</span>(pos, <span class="hljs-number">3</span>); <span class="hljs-comment">//从pos位置起，删除3个元素</span><br></code></pre></td></tr></table></figure><ul><li>string子串</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">string str = <span class="hljs-string">&quot;abcde&quot;</span>;<br>string subStr = str.<span class="hljs-built_in">substr</span>(<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// 从第一个位置起，3个元素</span><br></code></pre></td></tr></table></figure><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h4><ul><li>Vector与数组非常相似</li><li>构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(n, <span class="hljs-number">10</span>)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(v.begin(), v.end())</span></span><br></code></pre></td></tr></table></figure><ul><li>容量和大小</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">1</span>)</span></span>;<br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">100</span>); <span class="hljs-comment">// 用0来填充</span><br></code></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">v.<span class="hljs-built_in">insert</span>(v.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">1</span>);<br>v.<span class="hljs-built_in">erase</span>(v.<span class="hljs-built_in">begin</span>());<br></code></pre></td></tr></table></figure><ul><li>存取</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">v.<span class="hljs-built_in">front</span>();<br>v.<span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure><ul><li>互换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">1</span>)</span></span>;<br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v2</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>)</span></span>;<br>v<span class="hljs-number">1.</span><span class="hljs-built_in">swap</span>(v2);  <span class="hljs-comment">// v1容器和v2容器互换</span><br><br><br><span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v</span><span class="hljs-params">(<span class="hljs-number">10000</span>, <span class="hljs-number">1</span>)</span></span>;<br>v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>);<br><span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(v).<span class="hljs-built_in">swap</span>(v);  <span class="hljs-comment">// 收缩内存，v的容量变为10</span><br></code></pre></td></tr></table></figure><ul><li>vector预留空间</li></ul><p>reserve(int len); &#x2F;&#x2F; 预留一部分空间，但是size不变</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">vector&lt;<span class="hljs-type">int</span>&gt; v;<br>v.<span class="hljs-built_in">reserve</span>(<span class="hljs-number">1000</span>);<br></code></pre></td></tr></table></figure><h4 id="Deque"><a href="#Deque" class="headerlink" title="Deque"></a>Deque</h4><p>双端数组</p><p>vector对于头部的插入删除效率低</p><p>vector访问元素的速度会比deque快</p><ul><li>内部实现</li></ul><p>利用一个中控器</p><p><img src="C:\Users\65489\AppData\Roaming\Typora\typora-user-images\image-20240907105917561.png" alt="image-20240907105917561"></p><ul><li><p>构造函数</p></li><li><p>赋值</p></li><li><p>大小</p></li></ul><p>deque.empty()</p><p>deque.size()</p><p>deque.resize(n)</p><p>deque.resize(n, number)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; dq;<br></code></pre></td></tr></table></figure><ul><li>插入删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">deque&lt;<span class="hljs-type">int</span>&gt; dq;<br>dq.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 尾插</span><br>dq.<span class="hljs-built_in">push_front</span>(<span class="hljs-number">2</span>); <span class="hljs-comment">// 头插</span><br>dq.<span class="hljs-built_in">pop_back</span>();<br>dq.<span class="hljs-built_in">pop_front</span>();<br><br>dq.<span class="hljs-built_in">insert</span>(dq.<span class="hljs-built_in">begin</span>(), <span class="hljs-number">1</span>);<br>dq.<span class="hljs-built_in">insert</span>(dq.<span class="hljs-built_in">begin</span>(), newdq.<span class="hljs-built_in">begin</span>(), newdq.<span class="hljs-built_in">end</span>());<br></code></pre></td></tr></table></figure><ul><li>数据存取</li></ul><h4 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h4><ul><li>构造函数</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><ul><li>赋值操作</li><li>数据存取</li><li>大小操作</li></ul><h4 id="Queue"><a href="#Queue" class="headerlink" title="Queue"></a>Queue</h4><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><ul><li><p>链表：将数据进行链式存储</p></li><li><p>STL中的链表是一个双向循环链表</p></li><li><p>链表的迭代器是一个双向迭代器，不支持随机访问</p></li><li><p>构造函数</p></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br><span class="hljs-function">list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">l2</span><span class="hljs-params">(l1,begin(), l<span class="hljs-number">1.</span>end())</span></span>;<br><br><span class="hljs-function">list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">l3</span><span class="hljs-params">(l2)</span></span>;<br><br><span class="hljs-function">list&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">l4</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>)</span></span>;<br></code></pre></td></tr></table></figure><ul><li>赋值和交换</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 赋值</span><br>list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br>list&lt;<span class="hljs-type">int</span>&gt; l2;<br>l2 = l1;<br><br>list&lt;<span class="hljs-type">int</span>&gt; l3;<br>l<span class="hljs-number">3.</span><span class="hljs-built_in">assign</span>(l<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), l<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>());<br><br>list&lt;<span class="hljs-type">int</span>&gt; l4;<br>l<span class="hljs-number">4.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><br><span class="hljs-comment">// 交换</span><br>list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br>list&lt;<span class="hljs-type">int</span>&gt; l2;<br>l<span class="hljs-number">2.</span><span class="hljs-built_in">assign</span>(<span class="hljs-number">10</span>, <span class="hljs-number">100</span>);<br><br>l<span class="hljs-number">1.</span><span class="hljs-built_in">swap</span>(l2);<br></code></pre></td></tr></table></figure><ul><li>大小操作</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br>l<span class="hljs-number">1.</span><span class="hljs-built_in">empty</span>();<br><br>l<span class="hljs-number">1.</span><span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 默认用0填充</span><br></code></pre></td></tr></table></figure><ul><li>插入和删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_front</span>(<span class="hljs-number">2</span>);<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">pop_back</span>();<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">pop_front</span>();<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">insert</span>(l<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), <span class="hljs-number">100</span>);<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">erase</span>(l<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>());<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">remove</span>(<span class="hljs-number">1000</span>); <span class="hljs-comment">// 按照值删除</span><br>l<span class="hljs-number">1.</span><span class="hljs-built_in">clear</span>();<br></code></pre></td></tr></table></figure><ul><li>数据存取</li></ul><p>list是链表，不是用连续线性空间存储数据，迭代器不支持随机访问，所以不能用[]的方式访问</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>l<span class="hljs-number">1.f</span>ront();<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">back</span>();<br></code></pre></td></tr></table></figure><ul><li>反转和排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++">list&lt;<span class="hljs-type">int</span>&gt; l1;<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">reverse</span>();<br>l<span class="hljs-number">1.</span><span class="hljs-built_in">sort</span>();  <span class="hljs-comment">// 通过写回调函数，可以实现自定义规则排序</span><br></code></pre></td></tr></table></figure><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><ul><li>set属于关联式容器，底层结构是用二叉树实现(红黑树)</li><li>set不允许容器中有重复的元素</li><li>multiset允许容器中有重复元素</li><li>set容器在插入数据后会自动排序</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">set&lt;<span class="hljs-type">int</span>&gt; a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li><p>大小和交换</p></li><li><p>排序</p></li></ul><p>利用仿函数来实现对set的排序</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">campare</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v1, <span class="hljs-type">int</span> v2)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> v1 &gt; v2;<br>    &#125;<br>&#125;;<br>set&lt;<span class="hljs-type">int</span>, campare&gt; s;<br>s.<span class="hljs-built_in">insert</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h4 id="Pair"><a href="#Pair" class="headerlink" title="Pair"></a>Pair</h4><ul><li>pair的创建</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function">pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; <span class="hljs-title">a</span><span class="hljs-params">(<span class="hljs-string">&#x27;c&#x27;</span>, <span class="hljs-number">1</span>)</span></span>;<br>pair&lt;<span class="hljs-type">char</span>, <span class="hljs-type">int</span>&gt; a = <span class="hljs-built_in">make_pair</span>(c, <span class="hljs-number">2</span>);<br></code></pre></td></tr></table></figure><h4 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h4><ul><li>map中所有元素都是pair</li><li>key和value，key是索引</li><li>插入删除</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a;<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">make_pair</span>(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>));<br>a.<span class="hljs-built_in">insert</span>(<span class="hljs-built_in">pair</span>&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt;(<span class="hljs-number">2</span>, <span class="hljs-number">2</span>));<br><br>a.<span class="hljs-built_in">earse</span>(a.<span class="hljs-built_in">begin</span>());<br>a.<span class="hljs-built_in">erase</span>(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><ul><li>查找与统计</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++">map&lt;<span class="hljs-type">int</span>, <span class="hljs-type">int</span>&gt; a;<br><span class="hljs-keyword">auto</span> it = a.<span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>); <span class="hljs-comment">// 返回的是迭代器</span><br></code></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><h4 id="函数对象"><a href="#函数对象" class="headerlink" title="函数对象"></a>函数对象</h4><ul><li>重载函数调用操作符的类，其对象称为函数对象</li><li>函数对象使用重载的()时，行为类似函数调用，也叫<strong>仿函数</strong></li></ul><ol><li>函数对象使用时，可以像普通函数那样调用，可以有参数，可以有返回值</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myadd</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    Myadd a;<br>    cout &lt;&lt; <span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>) &lt;&lt; endl;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>函数对象超出了普通函数的概念，函数对象可以有自己的状态</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myprint</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Myprint</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;count = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(string s)</span> </span>&#123;<br>        cout &lt;&lt; s &lt;&lt; endl;<br>        <span class="hljs-keyword">this</span>-&gt;count ++;<br>    &#125;<br>    <span class="hljs-type">int</span> count; <span class="hljs-comment">// 内部状态</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    Myprint s;<br>    <span class="hljs-built_in">s</span>(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    <span class="hljs-built_in">s</span>(<span class="hljs-string">&quot;hello world&quot;</span>);  <span class="hljs-comment">// count变为2</span><br>    cout &lt;&lt; s.count;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test02</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>函数对象可以作为参数进行传递</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Myprint</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Myprint</span>() &#123;<br>        <span class="hljs-keyword">this</span>-&gt;count = <span class="hljs-number">0</span>;<br>    &#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span> <span class="hljs-params">(string s)</span> </span>&#123;<br>        cout &lt;&lt; s &lt;&lt; endl;<br>        <span class="hljs-keyword">this</span>-&gt;count ++;<br>    &#125;<br>    <span class="hljs-type">int</span> count; <span class="hljs-comment">// 内部状态</span><br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doPrint</span><span class="hljs-params">(Myprint&amp; mp, string test)</span> </span>&#123;<br>    <span class="hljs-built_in">mp</span>(test);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test03</span><span class="hljs-params">()</span> </span>&#123;<br>    Myprint s;<br>    <span class="hljs-built_in">doPrint</span>(s, <span class="hljs-string">&quot;hello world&quot;</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test03</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="谓词"><a href="#谓词" class="headerlink" title="谓词"></a>谓词</h4><ol><li>一元谓词</li></ol><ul><li>返回bool类型的仿函数称为谓词</li><li>如果operator()接受一个参数，称为一元谓词</li><li>如果接受两个参数，称为二元谓词</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">GreatFive</span> &#123;<br><span class="hljs-keyword">public</span>:<br><span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; <span class="hljs-number">5</span>;<br>    &#125;    <br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>  vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">2</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">7</span>);<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find_if</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">GreatFive</span>());<br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>二元谓词</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Mycompare</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operatoe</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> a, <span class="hljs-type">int</span> b)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> a &gt; b;<br>    &#125;<br>&#125;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-2</span>);<br>    <br>    <span class="hljs-comment">// sort(v.begin(), v.end(), [](int a, int b)&#123; return a &gt; b&#125;;);</span><br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">Mycompare</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>内建函数对象</li></ol><ul><li>STL内建了一些函数对象</li><li>分为算数仿函数、</li></ul><p>算数仿函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>negate&lt;<span class="hljs-type">int</span>&gt; n;<br>    cout &lt;&lt; <span class="hljs-built_in">n</span>(<span class="hljs-number">50</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    plus&lt;<span class="hljs-type">int</span>&gt; a;<br>    <span class="hljs-comment">// minus、multiplies、divides、modulus（取模）</span><br>    cout &lt;&lt; <span class="hljs-built_in">a</span>(<span class="hljs-number">10</span>, <span class="hljs-number">10</span>);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();  <span class="hljs-comment">// 输出-50</span><br>    <span class="hljs-built_in">test02</span>(); <span class="hljs-comment">// 输出20</span><br>&#125;<br></code></pre></td></tr></table></figure><p>关系仿函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; a;<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    a.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    a.<span class="hljs-built_in">push_bacl</span>(<span class="hljs-number">-1</span>);<br><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>()); <span class="hljs-comment">// 从小到大</span><br>    <span class="hljs-built_in">sort</span>(a.<span class="hljs-built_in">begin</span>(), a.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greater</span>&lt;<span class="hljs-type">int</span>&gt;()); <span class="hljs-comment">// 内建函数对象</span><br>&#125;<br></code></pre></td></tr></table></figure><p>逻辑仿函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">bool</span>&gt; v;<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">false</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-literal">true</span>);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v.<span class="hljs-built_in">size</span>(); i ++ ) &#123;<br>        cout &lt;&lt; v[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>    <br>    <span class="hljs-function">vector&lt;<span class="hljs-type">bool</span>&gt; <span class="hljs-title">temp</span><span class="hljs-params">(v.size())</span></span>;<br>    <span class="hljs-built_in">transform</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), temp.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">logical_not</span>&lt;<span class="hljs-type">bool</span>&gt;())<br>        <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; temp.<span class="hljs-built_in">size</span>(); i ++ ) &#123;<br>        cout &lt;&lt; temp[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="STL常见算法"><a href="#STL常见算法" class="headerlink" title="STL常见算法"></a>STL常见算法</h3><p><algorithm> 是STL头文件中最大的一个，范围涉及到比较、交换、查找、遍历操作、复制、修改</p><p><numeric>体积很小，只包括几个在序列上面进行简单数学运算的模版函数</p><p><functional>定义了一些模版类，用于声明函数对象</p><h4 id="遍历算法"><a href="#遍历算法" class="headerlink" title="遍历算法"></a>遍历算法</h4><ol><li>for_each</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">print</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        cout &lt;&lt; val &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">print01</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>    cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">3</span>);<br>    <span class="hljs-comment">// for_each(v.begin(), v.end(), print01);</span><br>    for_each(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">print</span>());<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>transform</li></ol><p>将一个容器的内容搬运到另一个容器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Trans</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> v)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> v + <span class="hljs-number">1</span>  ;<br>    &#125; <br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">print</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        cout &lt;&lt; val &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>; <br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">17</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">1</span>);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt; target;<br>    target.<span class="hljs-built_in">resize</span>(v.<span class="hljs-built_in">size</span>());<br><br>    <span class="hljs-built_in">transform</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), target.<span class="hljs-built_in">begin</span>(), <span class="hljs-built_in">Trans</span>());<br><br>    for_each(target.<span class="hljs-built_in">begin</span>(), target.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">print</span>());<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="查找算法"><a href="#查找算法" class="headerlink" title="查找算法"></a>查找算法</h4><ol><li>find</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br><br>    vector&lt;<span class="hljs-type">int</span>&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br><br>    <span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) cout &lt;&lt; *it;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string name;<br>    <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>    &#125;<br><br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;name == p.name &amp;&amp; <span class="hljs-keyword">this</span>-&gt;age == p.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    Person p1 = <span class="hljs-built_in">Person</span>(<span class="hljs-string">&quot;libai&quot;</span>, <span class="hljs-number">1</span>);<br>    Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-string">&quot;wangwei&quot;</span>, <span class="hljs-number">2</span>);<br>    Person p3 = <span class="hljs-built_in">Person</span>(<span class="hljs-string">&quot;dufu&quot;</span>, <span class="hljs-number">3</span>);<br>    <br>    vector&lt;Person&gt; v;<br>    v.<span class="hljs-built_in">push_back</span>(p1);<br>    v.<span class="hljs-built_in">push_back</span>(p2);<br>    v.<span class="hljs-built_in">push_back</span>(p3);<br><br>    vector&lt;Person&gt;::iterator it = <span class="hljs-built_in">find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), p2);<br><br>    <span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) cout &lt;&lt; (*it).name &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; (*it).age;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>find_if</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">greaterFive</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">find_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greaterFive</span>());<br><span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) cout &lt;&lt; *it;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>adjacent_find</li></ol><p>查找相邻重复元素</p><p>返回相邻元素的第一个元素的迭代器</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">5</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">4</span>);<br>    <br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">adjacent_find</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>    <br><span class="hljs-keyword">if</span> (it != v.<span class="hljs-built_in">end</span>()) cout &lt;&lt; *it &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span> &lt;&lt; *(it ++);<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test02</span>();<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>binary_search</li></ol><p>查找指定元素是否存在，查到了返回True，否则返回false</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 必须在有序序列中</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i = i + <span class="hljs-number">2</span>) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-type">bool</span> ans = <span class="hljs-built_in">binary_search</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">5</span>);<br>    <br>    cout &lt;&lt; ans;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="5"><li>count</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">1</span>);s<br>    <br>    cout &lt;&lt; num;<br>&#125;<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> age;<br>    string name;<br>    <br>    <span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>==(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>-&gt;age == p.age) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>    <br>    <span class="hljs-built_in">Person</span>(string name, <span class="hljs-type">int</span> age) &#123;<br>    <span class="hljs-keyword">this</span>-&gt;name = name;<br>        <span class="hljs-keyword">this</span>-&gt;age = age;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>  vector&lt;Person&gt; p;<br>    <span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-string">&quot;libai&quot;</span>, <span class="hljs-number">1</span>)</span></span>;<br>    <span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-string">&quot;zhangsan&quot;</span>, <span class="hljs-number">1</span>)</span></span>;<br>    p.<span class="hljs-built_in">push_back</span>(p1);<br>    p.<span class="hljs-built_in">push_back</span>(p2);<br>    <br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">count</span>(p.<span class="hljs-built_in">begin</span>(), p.<span class="hljs-built_in">end</span>(), p2);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="6"><li>count_if</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;bits/stdc++.h&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">greaterFive</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">count_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greaterFive</span>());<br>    cout &lt;&lt; num;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="排序算法"><a href="#排序算法" class="headerlink" title="排序算法"></a>排序算法</h4><ol><li>sort</li></ol><blockquote><p>sort(iterator beg, iterator end, _Pred);  &#x2F;&#x2F; _Pred是谓词</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">9</span>);<br>    v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">-2</span>);<br>v.<span class="hljs-built_in">push_back</span>(<span class="hljs-number">7</span>);<br>    <br>    <span class="hljs-built_in">sort</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>random_shuffle</li></ol><blockquote><p>打乱数据，洗牌</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-built_in">random_shuffle</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>merge</li></ol><blockquote><p>两个有序容器元素合并</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v2 = &#123;<span class="hljs-number">4</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>&#125;;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() + v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>());<br>    <br>    <span class="hljs-built_in">merge</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), v.<span class="hljs-built_in">begin</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>reverse</li></ol><blockquote><p>反转元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><br></code></pre></td></tr></table></figure><h4 id="拷贝和替换算法"><a href="#拷贝和替换算法" class="headerlink" title="拷贝和替换算法"></a>拷贝和替换算法</h4><ol><li>copy</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1 = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>&#125;;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    v.<span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>());<br>    <br>    <span class="hljs-built_in">copy</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v.<span class="hljs-built_in">begin</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>replace</li></ol><blockquote><p>replace(iterator beg, iterator end, old_val, new_val)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-function">vector&lt;<span class="hljs-type">int</span>&gt; <span class="hljs-title">v1</span><span class="hljs-params">(<span class="hljs-number">3</span>, <span class="hljs-number">10</span>)</span></span>;<br>    <br>    <span class="hljs-built_in">replace</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), <span class="hljs-number">10</span>, <span class="hljs-number">20</span>);  <span class="hljs-comment">// 10替换为20</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>replace_if</li></ol><blockquote><p>replace(iterator beg, iterator end, _Pred, new_val)</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">greaterFive</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">bool</span> <span class="hljs-title">operator</span><span class="hljs-params">()</span><span class="hljs-params">(<span class="hljs-type">int</span> val)</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> val &gt; <span class="hljs-number">5</span>;<br>    &#125;<br>&#125;;<br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt;　v;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-built_in">replace_if</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-built_in">greaterFive</span>(), <span class="hljs-number">2000</span>);<br>&#125;<br></code></pre></td></tr></table></figure><ol start="4"><li>swap</li></ol><blockquote><p>互换两个容器的元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1 = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">5</span>, <span class="hljs-number">1</span>);<br>    vector&lt;<span class="hljs-type">int</span>&gt; v2 = <span class="hljs-built_in">vector</span>&lt;<span class="hljs-type">int</span>&gt;(<span class="hljs-number">6</span>, <span class="hljs-number">7</span>);<br>    <br>    <span class="hljs-built_in">swap</span>(v1, v2);<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i ++ ) cout &lt;&lt; v1[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>    cout &lt;&lt; endl;<br>   <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(); i ++ ) cout &lt;&lt; v2[i] &lt;&lt; <span class="hljs-string">&#x27; &#x27;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="算术生成算法"><a href="#算术生成算法" class="headerlink" title="算术生成算法"></a>算术生成算法</h4><ol><li>accumulate</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">100</span>; i ++ ) v.<span class="hljs-built_in">push_back</span>(i);<br>    <br>    <span class="hljs-type">int</span> num = <span class="hljs-built_in">accumulate</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">0</span>);<br>    <br>    cout &lt;&lt; num;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>fill</li></ol><blockquote><p>向容器中填充指定元素</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v;<br>   v.<span class="hljs-built_in">resize</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 10个0</span><br>    <br>    <span class="hljs-built_in">fill</span>(v.<span class="hljs-built_in">begin</span>(), v.<span class="hljs-built_in">end</span>(), <span class="hljs-number">100</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="常见集合算法"><a href="#常见集合算法" class="headerlink" title="常见集合算法"></a>常见集合算法</h4><ol><li>set_intersection</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 求交集</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>   vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) &#123;<br>        v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>        v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">5</span>);<br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; target;<br>    target.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">min</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()));<br>    <br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">set_intersection</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), target.<span class="hljs-built_in">begin</span>());<br>    <span class="hljs-comment">// 返回的it指向交集最后元素的下一个位置</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>set_union</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 求并集</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) &#123;<br>        v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>        v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">5</span>);<br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; target;<br>    target.<span class="hljs-built_in">resize</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>() + v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>());<br>    <br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">set_union</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), target.<span class="hljs-built_in">begin</span>());<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>set_difference</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 求差集</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v1;<br>    vector&lt;<span class="hljs-type">int</span>&gt; v2;<br>    <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i ++ ) &#123;<br>        v<span class="hljs-number">1.</span><span class="hljs-built_in">push_back</span>(i);<br>        v<span class="hljs-number">2.</span><span class="hljs-built_in">push_back</span>(i + <span class="hljs-number">5</span>);<br>    &#125;<br>    <br>    vector&lt;<span class="hljs-type">int</span>&gt; target;<br>    target.<span class="hljs-built_in">resize</span>(<span class="hljs-built_in">max</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">size</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">size</span>()));<br>    <br>    <span class="hljs-keyword">auto</span> it = <span class="hljs-built_in">set_difference</span>(v<span class="hljs-number">1.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">1.</span><span class="hljs-built_in">end</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">begin</span>(), v<span class="hljs-number">2.</span><span class="hljs-built_in">end</span>(), target.<span class="hljs-built_in">begin</span>());<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cpp语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp语法</tag>
      
      <tag>泛型编程</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Cpp面向对象</title>
    <link href="/2025/03/07/cpp_base/"/>
    <url>/2025/03/07/cpp_base/</url>
    
    <content type="html"><![CDATA[<h2 id="C-核心"><a href="#C-核心" class="headerlink" title="C++核心"></a>C++核心</h2><h3 id="类和对象"><a href="#类和对象" class="headerlink" title="类和对象"></a>类和对象</h3><ol><li>类和对象</li></ol><p>类和对象是C++面向对象的基础，在C++中万事万物都是对象，C++利用类来实例化对象，下面是创建一个Circle类并实例化的语法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 创建类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Circle</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_r;<br>    <br>    <span class="hljs-type">void</span> getM_r &#123;<br>        cout &lt;&lt; m_r;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 实例化</span><br>Circle a;   <br></code></pre></td></tr></table></figure><p>类中的变量称为属性(成员属性)，类中的函数称为行为（成员函数、成员方法）。</p><ol start="2"><li>访问权限</li></ol><p>public: 类内可以访问，类外可以访问</p><p>protected: 类内可以访问，类外不可以访问</p><p>private: 类内可以访问，类外不可以访问</p><p><strong>protected 和 private</strong>在继承部分会有不同。</p><ol start="3"><li>struct和class的区别</li></ol><p>默认访问权限不同，struct默认访问权限是public，class默认权限是private</p><ol start="4"><li>在C++中一般把成员属性设置为私有，把成员方法设置公共。下面是一个标准的C++类。</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>string name;<br>    <span class="hljs-type">int</span> val;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function">string <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(string s)</span> </span>&#123;<br>        name = s;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">getVal</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> val;<br>    &#125;<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">setVal</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> </span>&#123;<br>        val = x;<br>    &#125;<br>&#125;;<br><br><span class="hljs-comment">// 实例化</span><br>Person a;<br>a.<span class="hljs-built_in">setName</span>(<span class="hljs-string">&quot;小明&quot;</span>);<br>a.<span class="hljs-built_in">setVal</span>(<span class="hljs-number">100</span>);<br><br>cout &lt;&lt; a.<span class="hljs-built_in">getName</span>() &lt;&lt; endl;<br>cout &lt;&lt; a.<span class="hljs-built_in">getVal</span>();<br></code></pre></td></tr></table></figure><p>通过成员函数来访问和设置成员属性，可以防止误操作。</p><ol start="5"><li>对象的初始化和清理</li></ol><p>C++通过<strong>构造函数</strong>和<strong>析构函数</strong>来进行初始化和清理，这两个函数由编译器自动调用，同时存在默认实现。</p><p><strong>构造函数</strong>：创建对象时给对象赋值</p><p><strong>析构函数</strong>：对象销毁前，系统自动调用</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 构造函数</span><br>类名()&#123;&#125;<br><span class="hljs-comment">// 析构函数</span><br>~类名()&#123;&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> val;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123;<br>     <span class="hljs-comment">// 无参构造   </span><br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> x) &#123;<br>        <span class="hljs-comment">// 含参构造</span><br>        val = x;<br>    &#125;<br>    <br>    ~<span class="hljs-built_in">Person</span>() &#123;<br>        <span class="hljs-comment">// 不允许有参数，也不允许发生重载</span><br>        <span class="hljs-comment">// 对象销毁前自动调用</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="6"><li>构造函数的分类及调用</li></ol><p>分类：无参构造（默认构造），有参构造、拷贝构造</p><p><strong>拷贝构造</strong>：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">int</span> age;<br>    <br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123; <span class="hljs-comment">// 无参构造</span><br>        <br>    &#125;<br>    <br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">int</span> a) &#123; <span class="hljs-comment">// 有参构造</span><br>        <br>    &#125;<br>    <br><span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123; <span class="hljs-comment">// 拷贝构造</span><br>        age = p.age;<br>    &#125;  <br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>调用方式</strong>：</p><p>括号法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造调用</span><br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">10</span>)</span></span>; <span class="hljs-comment">// 有参构造</span><br><span class="hljs-function">Person <span class="hljs-title">p3</span><span class="hljs-params">(p2)</span></span>; <span class="hljs-comment">// 拷贝构造</span><br></code></pre></td></tr></table></figure><p>Person p();  不允许这样调用无参构造，尽管编译不报错，但在运行时，会将这一句误解为<strong>函数声明</strong></p><p>显示法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造</span><br>Person p2 = <span class="hljs-built_in">Person</span>(<span class="hljs-number">10</span>); <span class="hljs-comment">// 有参构造</span><br>Person p3 = <span class="hljs-built_in">Person</span>(p2); <span class="hljs-comment">// 拷贝构造</span><br><br><span class="hljs-comment">// Person(10) 会被认为是一个匿名对象，执行结束后，系统会立即回收匿名对象。</span><br><br><span class="hljs-comment">// Person(p3); 这样是错误的。不要利用拷贝构造，创建匿名对象，会被认为是一个对象的声明</span><br></code></pre></td></tr></table></figure><p>隐式转换法：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C++">Person p1; <span class="hljs-comment">// 默认构造</span><br>Person p2 = <span class="hljs-number">10</span>; <span class="hljs-comment">// 有参构造</span><br>Person p3 = p2; <span class="hljs-comment">// 拷贝构造</span><br></code></pre></td></tr></table></figure><p>new开辟的数据在堆区</p><ol start="7"><li>浅拷贝与深拷贝</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>  string name;<br>    <span class="hljs-type">int</span>* t;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>() &#123;&#125;<br>    <span class="hljs-built_in">Person</span>(string _name, <span class="hljs-type">int</span> <span class="hljs-type">_t</span>) &#123;<br>        name = _name;<br>        t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(<span class="hljs-type">_t</span>); <span class="hljs-comment">// 开辟在堆区</span><br>    &#125;<br>    <span class="hljs-built_in">Person</span>(<span class="hljs-type">const</span> Person&amp; p) &#123;<br>        name = p.name;<br>        t = p.t;  <span class="hljs-comment">// 编译器提供的默认拷贝形式（浅拷贝）</span><br>        t = <span class="hljs-keyword">new</span> <span class="hljs-built_in">int</span>(*p.<span class="hljs-type">int</span>); <span class="hljs-comment">// 深拷贝</span><br>    &#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>浅拷贝会造成堆区内存重复释放。</p><ol start="8"><li>初始化列表</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">private</span>:<br>    string name;<br>    Person* next;<br><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Person</span>(string _name, Person* _next) : <span class="hljs-built_in">name</span>(_name), <span class="hljs-built_in">next</span>(_next) &#123;&#125;<br>&#125;;<br></code></pre></td></tr></table></figure><p>9、静态成员</p><p>静态成员变量：</p><ul><li>所有对象共享同一份数据</li><li>编译阶段分配内存（全局区）</li><li>类内声明，类外初始化</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> &#123; <span class="hljs-comment">// 类内声明</span><br><span class="hljs-keyword">private</span>:<br>    <span class="hljs-type">static</span> <span class="hljs-type">int</span> a;<br>&#125;;<br><br><span class="hljs-type">int</span> person::a = <span class="hljs-number">100</span>; <span class="hljs-comment">// 类外初始化</span><br><span class="hljs-comment">// 静态成员变量也有访问权限</span><br></code></pre></td></tr></table></figure><p>静态成员函数：</p><ul><li>所有对象共享同一个函数</li><li>静态成员函数只能访问静态成员变量</li></ul><h3 id="对象特性"><a href="#对象特性" class="headerlink" title="对象特性"></a>对象特性</h3><ol><li>C++对象模型和this指针</li></ol><ul><li>在C++中，类内的成员变量和成员函数分开存储</li><li>只有非静态成员变量才属于类的对象上</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 一个对象占多少内存，取决于它的成员变量</span><br><span class="hljs-comment">// 空对象占一个字节</span><br></code></pre></td></tr></table></figure><ol start="2"><li>this指针</li></ol><ul><li>this指针指向被调用的成员函数所属的对象</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    string name;<br>    <br>    <span class="hljs-built_in">person</span>(string name) &#123;<br>        <span class="hljs-comment">// 解决名称冲突问题</span><br>        <span class="hljs-keyword">this</span>-&gt;name = name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="3"><li>空指针访问成员函数</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 空指针可以访问函数</span><br><span class="hljs-comment">// 但是不能访问其中的属性</span><br></code></pre></td></tr></table></figure><ol start="4"><li>const修饰成员函数</li></ol><ul><li>常函数内不能修改成员属性</li><li>常对象只能调用常函数</li><li>this的本质是指针常量</li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">showPerson</span><span class="hljs-params">()</span> <span class="hljs-type">const</span> </span>&#123;<br>        m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 非法</span><br>        m_B = <span class="hljs-number">200</span>; <span class="hljs-comment">// 合法</span><br>    &#125;<br>    <br>    <span class="hljs-type">int</span> m_A;<br>    <span class="hljs-keyword">mutable</span> <span class="hljs-type">int</span> m_B;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-type">const</span> Person p;<br>    p.m_A = <span class="hljs-number">100</span>; <span class="hljs-comment">// 非法</span><br>    p.m_B = <span class="hljs-number">200</span>; <span class="hljs-comment">// 合法</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="友元"><a href="#友元" class="headerlink" title="友元"></a>友元</h3><p>在程序中，有些私有属性，也想让类外的特殊函数访问</p><ol><li>全局函数做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> &#123;<br>    <span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Building build)</span></span>; <span class="hljs-comment">// 声明友元全局函数</span><br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Building</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    string sittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string room;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">(Building Build)</span> </span>&#123;<br>    cout &lt;&lt; build.sittingRoom; <span class="hljs-comment">// 合法</span><br>cout &lt;&lt; build.room; <span class="hljs-comment">// 非法</span><br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>类做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Goodgay</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    Building* build = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Building</span>();<br>    <br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">visit</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; build-&gt;room;  <span class="hljs-comment">// 非法</span><br>        cout &lt;&lt; build-&gt;sittingRoom; <span class="hljs-comment">// 合法</span><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Building</span> &#123;<br>    <span class="hljs-keyword">friend</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Goodgay</span>;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-built_in">Building</span>() &#123;&#125;<br><span class="hljs-keyword">public</span>:<br>    string sittingRoom;<br><span class="hljs-keyword">private</span>:<br>    string room;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="3"><li>成员函数做友元</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-function"><span class="hljs-keyword">friend</span> <span class="hljs-type">void</span> <span class="hljs-title">Goodgay::visit</span><span class="hljs-params">()</span></span>;<br></code></pre></td></tr></table></figure><h3 id="运算符重载"><a href="#运算符重载" class="headerlink" title="运算符重载"></a>运算符重载</h3><p>对已有的运算符重新进行定义，赋予其另一种功能</p><ol><li>加号重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br>&#125;<br>Person <span class="hljs-keyword">operator</span>+ (Person&amp; p1, Person&amp; p2) &#123;<br>    <span class="hljs-comment">// 重载+号</span><br>    Person temp;<br>    temp.m_a = p<span class="hljs-number">1.</span>m_a + p<span class="hljs-number">2.</span>m_a;<br>    <span class="hljs-keyword">return</span> temp;<br>&#125;;<br>Person s1;<br>s<span class="hljs-number">1.</span>m_a = <span class="hljs-number">10</span>;<br>Person s2;<br>s<span class="hljs-number">2.</span>m_a = <span class="hljs-number">20</span>;<br>Person p3 = p1 + p2; <span class="hljs-comment">// 非法操作，编译器无法理解P1 + p2</span><br></code></pre></td></tr></table></figure><ol start="2"><li>左移运算符</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-comment">// 重载 &lt;&lt; 可以输出类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> m_a;<br>&#125;;<br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>&lt;&lt; (ostream cout, Person&amp; p) &#123;<br>    <span class="hljs-comment">// 重载&lt;&lt;号</span><br>cout &lt;&lt; p.m_a;<br>&#125;<br>Person s1;<br>cout &lt;&lt; s1; <span class="hljs-comment">// 非法</span><br></code></pre></td></tr></table></figure><ol start="3"><li>递增运算符重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyInteger</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> number;<br>    <span class="hljs-built_in">MyInteger</span>() &#123;number = <span class="hljs-number">0</span>;&#125;<br>&#125;;<br><span class="hljs-comment">// 重载前置++</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++ (MyInteger&amp; p) &#123;<br>    p.number++;<br>&#125;<br><span class="hljs-comment">// 后置++</span><br><span class="hljs-type">void</span> <span class="hljs-keyword">operator</span>++ (<span class="hljs-type">int</span>) &#123;<br>    <br>&#125;<br>MyInteger p;<br>p ++;<br></code></pre></td></tr></table></figure><ol start="4"><li>赋值运算符重载</li></ol><p>编译器会对’&#x3D;’进行默认重载，对属性进行值拷贝，可能会带来浅拷贝的问题</p><ol start="5"><li>关系运算符重载</li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">int</span> age;<br>    string name;<br>&#125;;<br><br><span class="hljs-type">bool</span> <span class="hljs-keyword">operator</span>== (Person&amp; p1, Person&amp; p2) &#123;<br>    <span class="hljs-keyword">if</span> (p<span class="hljs-number">1.</span>age == p<span class="hljs-number">2.</span>age &amp;&amp; p<span class="hljs-number">1.</span>name == p<span class="hljs-number">2.</span>name) &#123;<br>        <span class="hljs-keyword">return</span> ture;<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Person <span class="hljs-title">p1</span><span class="hljs-params">(<span class="hljs-number">10</span>, <span class="hljs-string">&quot;tom&quot;</span>)</span></span>;<br><span class="hljs-function">Person <span class="hljs-title">p2</span><span class="hljs-params">(<span class="hljs-number">100</span>, <span class="hljs-string">&quot;tom&quot;</span>)</span></span>;<br><br><span class="hljs-keyword">if</span> (p1 == p2) <span class="hljs-comment">// 非法，需要重载==号</span><br></code></pre></td></tr></table></figure><ol start="6"><li><strong>函数调用重载</strong></li></ol><p>在STL中常用函数调用重载，也叫<strong>仿函数</strong></p><h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><ol><li>语法</li></ol><p>class 子类 : 继承方式 父类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">son</span> : <span class="hljs-keyword">public</span> father &#123;<br><span class="hljs-keyword">public</span>:<br>    cout &lt;&lt; <span class="hljs-string">&quot;这是一个子类&quot;</span> &lt;&lt; endl;<br>&#125;;<br></code></pre></td></tr></table></figure><ol start="2"><li>继承方式</li></ol><p>父类中私有的内容，子类无法访问</p><ul><li>公共继承</li></ul><p>父类中public变为public，protected变为protected</p><ul><li>保护继承</li></ul><p>父类中public变为protected，protected变为protected</p><p>保护权限，类外不可以访问</p><ul><li>私有继承</li></ul><p>父类中public变为private，protected变为private</p><ol start="3"><li>继承中的对象模型</li></ol><p>父类中所有非静态成员属性都会被子类继承下去</p><p>父类中私有成员属性，是被编译器隐藏了</p><ol start="4"><li>构造和析构顺序</li></ol><p>子类继承父类后，当创建子类对象时，也会调用父类的构造</p><p>先构造父类，再构造子类，先析构子类，再析构父类</p><ol start="5"><li>继承中同名的处理方式</li></ol><ul><li>访问子类 直接访问</li><li>访问父类 +作用域</li></ul><ol start="6"><li>同名静态成员处理</li></ol><p>跟5一样，子类直接访问，父类+作用域</p><p>子类中出现和父类同名静态成员函数，会隐藏掉父类的所有静态成员函数</p><p>son.father::fun()</p><ol start="7"><li>多继承语法</li></ol><p>语法：class 子类 : 继承方式 父类1，继承方式 父类2</p><ol start="8"><li>虚继承</li></ol><p>class sheep : virtual public animal {</p><p>};</p><p>菱形继承导致了子类继承同样的数据，造成内存浪费</p><p>virtual可以解决菱形继承的问题</p><p>vbptr 虚基类指针 指向 vbtable 虚基类表</p><h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><ul><li>静态多态：函数重载 运算符重载 复用函数名</li><li>动态多态：派生类和虚函数实现运行时多态</li></ul><p>静态多态的函数地址早绑定，编译阶段确定函数的地址</p><p>动态多态的函数地址晚绑定，运行阶段确定函数的地址</p><p>父类的指针，可以直接指向子类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br>  <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;动物在说话&quot;</span><br>    &#125;  <br>&#125;;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span> </span>&#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;猫在说话&quot;</span> &lt;&lt; endl;<br>    &#125;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">doSpeak</span><span class="hljs-params">(animal&amp; a)</span> </span>&#123;<br>    a.<span class="hljs-built_in">speak</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    cat a;<br>    <span class="hljs-built_in">doSpeak</span>(a);<br>&#125;<br><span class="hljs-comment">// 输出-&gt;动物在说话</span><br>将父类中的函数换位 <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">speak</span><span class="hljs-params">()</span></span><br><span class="hljs-function"><span class="hljs-comment">// 输出-&gt;猫在说话</span></span><br></code></pre></td></tr></table></figure><p>动态多态的两个条件</p><ul><li>存在继承关系</li><li>子类重写父类的虚函数</li><li>父类的指针或引用指向子类对象</li></ul><p>底层原理</p><p>virtual函数中存在一个vfptr-虚函数表指针</p><p>指向vftable</p><p><strong>纯虚函数</strong> </p><p>当类中有了纯虚函数，这个类就是抽象类</p><p>抽象类不可以实例化</p><p>子类必须重写抽象类中的纯虚函数，否则也属于抽象类</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-keyword">class</span> <span class="hljs-title class_">animal</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-function"><span class="hljs-keyword">virtual</span> <span class="hljs-type">void</span> <span class="hljs-title">fun</span><span class="hljs-params">()</span> </span>= <span class="hljs-number">0</span>; <span class="hljs-comment">// 纯虚函数</span><br>&#125;;<br></code></pre></td></tr></table></figure><p><strong>虚析构和纯虚析构</strong></p><p>把父类中的析构函数改为虚析构</p><p>利用虚析构可以解决父类指针释放子类对象，释放不干净的问题</p><p><strong>纯虚析构</strong></p><p>virtual ~animal() &#x3D; 0;</p><p>需要在类外，重写析构函数</p><h3 id="文件读写"><a href="#文件读写" class="headerlink" title="文件读写"></a>文件读写</h3><blockquote><p> <fstream>文件流管理</p></blockquote><p>1、文本文件</p><p>文件以文本的ASCII码形式存储在计算机中</p><p>2、二进制文件</p><p>文本以二进制形式存储在计算机中，用户一般不能直接读懂</p><ul><li>ofstream 写操作</li><li>ifstream 读操作</li><li>fstream 读写操作</li></ul><p>写文件步骤：</p><ol><li>包含头文件</li><li>创建流对象</li><li>打开文件</li></ol><p>ios::in 读文件的方式</p><p>ios::out 写文件的方式</p><p>ios::trunc 如果文件存在先删除，再创建</p><ol start="4"><li><p>写数据</p></li><li><p>关闭文件</p></li></ol><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-comment">// 写文件</span><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>    ofstream ofs;<br>    <br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;文件路径&quot;</span>, ios::out);<br>    <br>    ofs &lt;&lt; <span class="hljs-string">&quot;你好，文本&quot;</span> &lt;&lt; endl;<br>    <br>    ofs.<span class="hljs-built_in">close</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-comment">// 读文件</span><br>    ifstream ifs;<br>    <br>    ifs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;hello.txt&quot;</span>, ios::in);<br>    <br>    <span class="hljs-keyword">if</span> (!ifs.<span class="hljs-built_in">is_open</span>()) &#123;<br>        cout &lt;&lt; <span class="hljs-string">&quot;打开失败&quot;</span> &lt;&lt; endl;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <br>    <span class="hljs-type">char</span> buf[<span class="hljs-number">1024</span>] = &#123;<span class="hljs-number">0</span>&#125;;<br>    <span class="hljs-keyword">while</span> (ifs &gt;&gt; buf) &#123;<br>        cout &lt;&lt; buf &lt;&lt; endl;<br>    &#125;<br>    <br>    string buf;<br>    <span class="hljs-keyword">while</span> (<span class="hljs-built_in">getline</span>(ifs, buf)) &#123;<br>        cout &lt;&lt; buf &lt;&lt; endl;<br>    &#125;<br>    <br>    <span class="hljs-type">char</span> c;<br>    <span class="hljs-keyword">while</span> ((c = ifs.<span class="hljs-built_in">get</span>() != EOF)) &#123;<br>        cout &lt;&lt; c;<br>    &#125;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>&#x2F;&#x2F; 二进制方式读写</p><p>二进制写</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>];<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test01</span><span class="hljs-params">()</span> </span>&#123;<br>   ofstream ofs;<br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wang.txt&quot;</span>, ios::out | ios::binary);<br>    Person p;<br>    p.m_Name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    p.m_Age = <span class="hljs-number">18</span>;<br>    <br>    ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;p, <span class="hljs-built_in">sizeof</span>(Person));<br>    <br>    ofs.<span class="hljs-built_in">open</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure><p>二进制读</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;fstream&gt;</span></span><br><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span> &#123;<br><span class="hljs-keyword">public</span>:<br>    <span class="hljs-type">char</span> m_Name[<span class="hljs-number">64</span>] = <span class="hljs-string">&quot;zhaolei&quot;</span>;<br>    <span class="hljs-type">int</span> m_Age;<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">test02</span><span class="hljs-params">()</span> </span>&#123;<br>   ofstream ofs;<br>    ofs.<span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;wang.txt&quot;</span>, ios::out | ios::binary);<br>    Person p;<br>    p.m_Name = <span class="hljs-string">&quot;zhangsan&quot;</span>;<br>    p.m_Age = <span class="hljs-number">18</span>;<br>    <br>    ofs.<span class="hljs-built_in">write</span>((<span class="hljs-type">const</span> <span class="hljs-type">char</span>*)&amp;p, <span class="hljs-built_in">sizeof</span>(Person));<br>    <br>    ofs.<span class="hljs-built_in">open</span>();<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;<br>    <span class="hljs-built_in">test01</span>();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Cpp语法</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Cpp语法</tag>
      
      <tag>面向对象</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2025/02/19/hello-world/"/>
    <url>/2025/02/19/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
